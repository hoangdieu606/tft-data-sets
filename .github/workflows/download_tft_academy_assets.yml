name: Download TFT Academy Assets

on:
  schedule:
    - cron: '0 00 * * *' # Chạy lúc 00:00 UTC (07:00 +7)
  workflow_dispatch:

permissions:
  contents: write # Quyền đọc và ghi nội dung repository

concurrency:
  group: tft-academy-assets-${{ github.ref }}
  cancel-in-progress: true

jobs:
  download-assets:
    runs-on: ubuntu-latest
    timeout-minutes: 30 # Dừng workflow sau 30 phút

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Kiểm tra sự tồn tại của set-revival.json
        run: |
          if [ ! -f set-revival.json ]; then
            echo "File set-revival.json không tồn tại, tạo file mặc định với set=1"
            echo '{"set": "1"}' > set-revival.json
            git config --global user.name 'github-actions[bot]'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'
            git add set-revival.json
            git commit -m "Tạo set-revival.json với set mặc định"
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Kiểm tra trạng thái repository và xử lý thay đổi chưa commit
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          if [ -n "$(git status --porcelain)" ]; then
            echo "Unstaged changes detected, stashing them..."
            git add .
            git stash
          fi

      - name: Pull với rebase từ remote
        run: |
          git pull origin main --rebase || { echo "Pull failed, aborting rebase"; git rebase --abort; exit 1; }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Áp dụng stash nếu có
        run: |
          if git stash list | grep -q "stash"; then
            echo "Applying stashed changes..."
            git stash pop || { echo "Stash pop failed, resolving conflicts may be needed"; exit 1; }
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install axios p-queue

      - name: Tạo script JavaScript
        run: |
          mkdir -p .github/scripts
          cat << 'EOF' > .github/scripts/download_tft_academy_assets.cjs
          const axios = require('axios');
          const fs = require('fs').promises;
          const path = require('path');
          const { default: PQueue } = require('p-queue');

          const SET_NUMBER = 11;

          async function getCurrentSet() {
            try {
              const data = await fs.readFile('set-revival.json', 'utf8');
              return JSON.parse(data).set || '0';
            } catch (error) {
              return '0';
            }
          }

          async function saveCurrentSet(set) {
            await fs.writeFile('set-revival.json', JSON.stringify({ set }));
          }

          async function downloadImageWithRetry(imageUrl, savePath, retries = 3, delay = 10000) {
            for (let i = 0; i < retries; i++) {
              try {
                const response = await axios.get(imageUrl, { responseType: 'stream', timeout: 120000 });
                if (response.status === 200) {
                  await fs.mkdir(path.dirname(savePath), { recursive: true });
                  const writer = require('fs').createWriteStream(savePath);
                  response.data.pipe(writer);
                  await new Promise((resolve, reject) => {
                    writer.on('finish', () => {
                      console.log(`Đã tải thành công: ${savePath}`);
                      resolve();
                    });
                    writer.on('error', reject);
                  });
                  return true;
                } else {
                  throw new Error(`Tải thất bại: ${imageUrl}, status: ${response.status}`);
                }
              } catch (error) {
                if (i === retries - 1) {
                  console.error(`Lỗi khi tải ${imageUrl} sau ${retries} lần thử: ${error.message}`);
                  return false;
                }
                console.log(`Thử lại tải ${imageUrl} lần ${i + 1}/${retries} sau ${delay}ms...`);
                await new Promise(resolve => setTimeout(resolve, delay));
              }
            }
          }

          async function fetchWithRetry(url, retries = 3, delay = 10000) {
            for (let i = 0; i < retries; i++) {
              try {
                const response = await axios.get(url, { timeout: 120000 });
                return response;
              } catch (error) {
                if (i === retries - 1) throw error;
                console.log(`Thử lại ${url} lần ${i + 1}/${retries} sau ${delay}ms...`);
                await new Promise(resolve => setTimeout(resolve, delay));
              }
            }
          }

          async function processApi(apiUrl, subDir, imageUrlGenerator) {
            const outputDir = `public/assets/images/set${SET_NUMBER}/${subDir}`;
            let successCount = 0;
            let failCount = 0;

            try {
              const response = await fetchWithRetry(apiUrl);
              if (response.status !== 200) {
                console.error(`Gọi API thất bại: ${apiUrl}, status: ${response.status}`);
                return { successCount, failCount };
              }

              const dataKey = subDir === 'champions' ? 'champions' : subDir === 'traits' ? 'traits' : subDir === 'augments' ? 'augments' : 'items';
              const items = response.data[dataKey] || [];

              const images = [];
              items.forEach(item => {
                const imageUrls = imageUrlGenerator(item.apiName);
                images.push(...imageUrls);
              });

              console.log(`Chuẩn bị tải ${images.length} ảnh từ ${apiUrl} vào ${outputDir}...`);
              const queue = new PQueue({ concurrency: 5 });
              await queue.addAll(
                images.map(({ url, filename }) => async () => {
                  const savePath = path.join(outputDir, filename);
                  const success = await downloadImageWithRetry(url, savePath);
                  if (success) {
                    successCount++;
                  } else {
                    failCount++;
                  }
                })
              );
              console.log(`Hoàn tất tải từ ${apiUrl}: ${successCount} thành công, ${failCount} thất bại`);
              return { successCount, failCount };
            } catch (error) {
              console.error(`Lỗi xử lý API ${apiUrl}: ${error.message}`);
              return { successCount, failCount };
            }
          }

          async function main() {
            const currentSet = await getCurrentSet();
            const newSet = `${SET_NUMBER}`;

            // Kiểm tra set và thoát nếu không thay đổi
            if (newSet === currentSet) {
              console.log('Set không thay đổi, bỏ qua tải assets');
              process.exit(0); // Thoát workflow thành công
            }

            // Ghi SET vào GITHUB_ENV nếu set thay đổi
            require('fs').appendFileSync(process.env.GITHUB_ENV, `SET=${newSet}\n`);

            const apiConfigs = [
              {
                url: `https://tftacademy.com/api/assets/champions?set=${SET_NUMBER}`,
                subDir: 'champions',
                imageUrlGenerator: (apiName) => [
                  {
                    url: `https://assets.tftacademy.com/champions/champion_icons/${apiName}.webp`,
                    filename: `icon_${apiName}.webp`
                  },
                  {
                    url: `https://assets.tftacademy.com/champions/champion_abilities/${apiName}.webp`,
                    filename: `ability_${apiName}.webp`
                  }
                ]
              },
              {
                url: `https://tftacademy.com/api/assets/traits?set=${SET_NUMBER}`,
                subDir: 'traits',
                imageUrlGenerator: (apiName) => [{
                  url: `https://assets.tftacademy.com/traits/${apiName}.webp`,
                  filename: `${apiName}.webp`
                }]
              },
              {
                url: `https://tftacademy.com/api/assets/augments?set=${SET_NUMBER}`,
                subDir: 'augments',
                imageUrlGenerator: (apiName) => [{
                  url: `https://assets.tftacademy.com/augments/${apiName}.webp`,
                  filename: `${apiName}.webp`
                }]
              },
              {
                url: `https://tftacademy.com/api/assets/items?set=${SET_NUMBER}`,
                subDir: 'items',
                imageUrlGenerator: (apiName) => [{
                  url: `https://assets.tftacademy.com/items/${apiName}.webp`,
                  filename: `${apiName}.webp`
                }]
              }
            ];

            const response = await fetchWithRetry(apiConfigs[0].url).catch(err => {
              console.error(`Không thể lấy dữ liệu từ API: ${err.message}`);
              return null;
            });
            if (!response) return;

            console.log(`Bắt đầu tải assets cho set ${SET_NUMBER}...`);
            const baseDir = `public/assets/images/set${SET_NUMBER}`;
            // Chỉ xóa thư mục của SET_NUMBER hiện tại nếu tồn tại
            await fs.rm(baseDir, { recursive: true, force: true }).catch(() => {});
            await fs.mkdir(baseDir, { recursive: true });

            let totalSuccess = 0;
            let totalFail = 0;
            for (const config of apiConfigs) {
              const { successCount, failCount } = await processApi(config.url, config.subDir, config.imageUrlGenerator);
              totalSuccess += successCount;
              totalFail += failCount;
            }

            console.log(`Tổng kết: ${totalSuccess} ảnh tải thành công, ${totalFail} ảnh thất bại`);
            await saveCurrentSet(newSet);
          }

          main().catch(error => {
            console.error(`Lỗi chính: ${error.message}`);
            process.exit(1);
          });
          EOF

      - name: Chạy script tải assets
        run: node .github/scripts/download_tft_academy_assets.cjs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Kiểm tra số lượng ảnh và kích thước thư mục
        run: |
          echo "Số lượng ảnh tải được trong mỗi thư mục:"
          base_dir="public/assets/images/set${{ env.SET }}"
          if [ -d "$base_dir" ]; then
            for dir in "$base_dir/champions" "$base_dir/traits" "$base_dir/augments" "$base_dir/items"; do
              if [ -d "$dir" ]; then
                count=$(find "$dir" -type f | wc -l)
                echo "$dir: $count ảnh"
              fi
            done
            echo "Tổng số ảnh tải được:"
            find "$base_dir" -type f | wc -l
            echo "Kích thước thư mục:"
            du -sh "$base_dir"
          else
            echo "Thư mục $base_dir không tồn tại, có thể do set không thay đổi hoặc chưa tải lần nào."
          fi

      - name: Commit và push thay đổi
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add -A
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          git commit -m "Update TFT Academy assets for set ${SET} on $(date +'%d-%m-%Y')"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
